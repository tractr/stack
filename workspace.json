{
  "cli": {
    "defaultCollection": "@nrwl/angular"
  },
  "defaultProject": "pwa",
  "generators": {
    "@nrwl/angular": {
      "application": {
        "linter": "eslint"
      },
      "library": {
        "linter": "eslint"
      },
      "storybook-configuration": {
        "linter": "eslint"
      }
    },
    "@nrwl/angular:application": {
      "e2eTestRunner": "cypress",
      "linter": "eslint",
      "style": "less",
      "unitTestRunner": "jest"
    },
    "@nrwl/angular:component": {
      "style": "less"
    },
    "@nrwl/angular:library": {
      "linter": "eslint",
      "style": "less",
      "unitTestRunner": "jest"
    }
  },
  "projects": {
    "api": {
      "projectType": "application",
      "root": "apps/api",
      "sourceRoot": "apps/api/src",
      "targets": {
        "build": {
          "configurations": {
            "production": {
              "extractLicenses": true,
              "fileReplacements": [
                {
                  "replace": "apps/api/src/environments/environment.ts",
                  "with": "apps/api/src/environments/environment.prod.ts"
                }
              ],
              "inspect": false,
              "optimization": true
            }
          },
          "executor": "@nrwl/node:build",
          "options": {
            "main": "apps/api/src/main.ts",
            "outputPath": "dist/apps/api",
            "tsConfig": "apps/api/tsconfig.app.json"
          },
          "outputs": ["{options.outputPath}"]
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "options": {
            "lintFilePatterns": ["apps/api/**/*.ts"]
          }
        },
        "serve": {
          "executor": "@nrwl/node:execute",
          "options": {
            "buildTarget": "api:build"
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "options": {
            "jestConfig": "apps/api/jest.config.js",
            "passWithNoTests": true
          },
          "outputs": ["coverage/apps/api"]
        }
      }
    },
    "docs": {
      "projectType": "application",
      "root": "apps/docs",
      "sourceRoot": "apps/docs/src",
      "targets": {
        "build": {
          "executor": "@nx-plus/docusaurus:browser",
          "options": {
            "outputPath": "dist/apps/docs"
          }
        },
        "serve": {
          "executor": "@nx-plus/docusaurus:dev-server",
          "options": {
            "port": 3000
          }
        }
      }
    },
    "generated": {
      "prefix": "cali",
      "projectType": "library",
      "root": "libs/generated",
      "sourceRoot": "libs/generated/src",
      "targets": {
        "generate": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "npx rimraf generated",
              "node ../../node_modules/.bin/hpf-generate-config",
              {
                "command": "npx hpf generate",
                "forwardAllArgs": false
              }
            ],
            "cwd": "libs/generated",
            "parallel": false
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "options": {
            "jestConfig": "libs/generated/jest.config.js",
            "passWithNoTests": true
          },
          "outputs": ["coverage/libs/generated"]
        }
      }
    },
    "prisma": {
      "projectType": "library",
      "root": "libs/prisma",
      "sourceRoot": "libs/prisma/src",
      "targets": {
        "generate": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "npx rimraf generated",
              "node ../../node_modules/.bin/hpf-generate-config",
              {
                "command": "npx hpf generate",
                "forwardAllArgs": false
              },
              {
                "command": "npx prisma-merge --baseFile=prisma/schemas/base.prisma --schemaFilePatterns=prisma/**/*.prisma --outputFile=prisma/schema.prisma --excludedFilePattern=prisma/**/schema.prisma",
                "forwardAllArgs": false
              },
              {
                "command": "npx prisma format",
                "forwardAllArgs": false
              },
              {
                "command": "npx prisma generate",
                "forwardAllArgs": false
              }
            ],
            "cwd": "libs/prisma",
            "parallel": false
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "options": {
            "lintFilePatterns": ["libs/prisma/**/*.ts"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "options": {
            "jestConfig": "libs/prisma/jest.config.js",
            "passWithNoTests": true
          },
          "outputs": ["coverage/libs/prisma"]
        }
      }
    },
    "pwa": {
      "prefix": "cali",
      "projectType": "application",
      "root": "apps/pwa",
      "sourceRoot": "apps/pwa/src",
      "targets": {
        "build": {
          "configurations": {
            "development": {
              "buildOptimizer": false,
              "extractLicenses": false,
              "namedChunks": true,
              "optimization": false,
              "sourceMap": true,
              "vendorChunk": true
            },
            "production": {
              "budgets": [
                {
                  "maximumError": "1mb",
                  "maximumWarning": "500kb",
                  "type": "initial"
                },
                {
                  "maximumError": "4kb",
                  "maximumWarning": "2kb",
                  "type": "anyComponentStyle"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "apps/pwa/src/environments/environment.ts",
                  "with": "apps/pwa/src/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            }
          },
          "defaultConfiguration": "production",
          "executor": "@angular-devkit/build-angular:browser",
          "options": {
            "assets": ["apps/pwa/src/favicon.ico", "apps/pwa/src/assets"],
            "index": "apps/pwa/src/index.html",
            "inlineStyleLanguage": "less",
            "main": "apps/pwa/src/main.ts",
            "outputPath": "dist/apps/pwa",
            "polyfills": "apps/pwa/src/polyfills.ts",
            "scripts": [],
            "styles": ["apps/pwa/src/styles.less"],
            "tsConfig": "apps/pwa/tsconfig.app.json"
          },
          "outputs": ["{options.outputPath}"]
        },
        "extract-i18n": {
          "executor": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "pwa:build"
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "options": {
            "lintFilePatterns": [
              "apps/pwa/src/**/*.ts",
              "apps/pwa/src/**/*.html"
            ]
          }
        },
        "serve": {
          "configurations": {
            "development": {
              "browserTarget": "pwa:build:development"
            },
            "production": {
              "browserTarget": "pwa:build:production"
            }
          },
          "defaultConfiguration": "development",
          "executor": "@angular-devkit/build-angular:dev-server",
          "options": {
            "proxyConfig": "apps/pwa/proxy.conf.json"
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "options": {
            "jestConfig": "apps/pwa/jest.config.js",
            "passWithNoTests": true
          },
          "outputs": ["coverage/apps/pwa"]
        }
      }
    },
    "pwa-e2e": {
      "projectType": "application",
      "root": "apps/pwa-e2e",
      "sourceRoot": "apps/pwa-e2e/src",
      "targets": {
        "e2e": {
          "configurations": {
            "production": {
              "devServerTarget": "pwa:serve:production"
            }
          },
          "executor": "@nrwl/cypress:cypress",
          "options": {
            "cypressConfig": "apps/pwa-e2e/cypress.json",
            "devServerTarget": "pwa:serve:development",
            "tsConfig": "apps/pwa-e2e/tsconfig.e2e.json"
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "options": {
            "lintFilePatterns": ["apps/pwa-e2e/**/*.{js,ts}"]
          }
        }
      }
    },
    "video-analysis-mock": {
      "projectType": "application",
      "root": "apps/video-analysis-mock",
      "sourceRoot": "apps/video-analysis-mock/src",
      "targets": {
        "build": {
          "configurations": {
            "production": {
              "extractLicenses": true,
              "fileReplacements": [
                {
                  "replace": "apps/video-analysis-mock/src/environments/environment.ts",
                  "with": "apps/video-analysis-mock/src/environments/environment.prod.ts"
                }
              ],
              "inspect": false,
              "optimization": true
            }
          },
          "executor": "@nrwl/node:build",
          "options": {
            "main": "apps/video-analysis-mock/src/main.ts",
            "outputPath": "dist/apps/video-analysis-mock",
            "tsConfig": "apps/video-analysis-mock/tsconfig.app.json"
          },
          "outputs": ["{options.outputPath}"]
        },
        "cli": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "../../node_modules/ts-node/dist/bin.js -r tsconfig-paths/register src/cli.ts {args.cmd}"
            ],
            "cwd": "apps/video-analysis-mock",
            "parallel": false
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "options": {
            "lintFilePatterns": ["apps/video-analysis-mock/**/*.ts"]
          }
        },
        "serve": {
          "executor": "@nrwl/node:execute",
          "options": {
            "buildTarget": "video-analysis-mock:build"
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "options": {
            "jestConfig": "apps/video-analysis-mock/jest.config.js",
            "passWithNoTests": true
          },
          "outputs": ["coverage/apps/video-analysis-mock"]
        }
      }
    }
  },
  "version": 2
}
