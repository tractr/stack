name: Setup the workspace
description: Checkout, setup nodeJs, install and generate

inputs:
  registryUrl:
    description: 'The registry url where the packages are located'
    default: 'https://registry.npmjs.org'
    required: false
    type: string

  generate:
    description: 'Do we need to generate the files'
    default: true
    required: false
    type: boolean

  NPM_TOKEN:
    description: 'The npm token if needed'
    required: false

runs:
  using: 'composite'
  steps:
    # Check for the package manager
    - name: Check for PM lock file
      uses: actions/github-script@v3
      id: detectPM
      with:
        script: |
          const fs = require('fs');
          const pnpm = fs.existsSync('pnpm-lock.yaml');
          const yarn = !pnpm ? fs.existsSync('yarn.yaml') : false;
          const npm = !pnpm && !yarn;

          const PM = pnpm ? 'pnpm' : yarn ? 'yarn' : 'npm';

          return { pnpm, yarn, npm, PM };

    - name: Get result
      shell: bash
      run: echo "${{steps.detectPM.outputs.result}}"

    # We initialize the node action
    - name: Use node.js
      uses: actions/setup-node@v2
      with:
        cache: ${{ fromJSON(steps.detectPM.outputs.result).PM }}
        node-version: ${{ matrix.node }}
        registry-url: ${{ inputs.registryUrl }}

    - uses: pnpm/action-setup@v2.2.2
      if: ${{ steps.detectPM.outputs.result.pnpm }}
      with:
        version: 7

    # We install our dependencies
    - name: Run install packages (npm)
      shell: bash
      if: ${{ steps.detectPM.outputs.result.npm }}
      env:
        NODE_AUTH_TOKEN: ${{ inputs.NPM_TOKEN }}
      run: npm ci --no-audit --no-progress --force --ignore-scripts

    - name: Run install packages (yarn)
      shell: bash
      if: ${{ steps.detectPM.outputs.result.yarn }}
      env:
        NODE_AUTH_TOKEN: ${{ inputs.NPM_TOKEN }}
      run: yarn install --frozen-lockfile --ignore-scripts

    - name: Run install packages (pnpm)
      shell: bash
      if: ${{ steps.detectPM.outputs.result.pnpm }}
      env:
        NODE_AUTH_TOKEN: ${{ inputs.NPM_TOKEN }}
      run: pnpm install --frozen-lockfile --ignore-scripts

    # We launch our postinstall scripts
    - name: Run npm postinstall
      shell: bash
      env:
        PM: ${{ steps.detectPM.outputs.result.PM }}
      run: |
        echo "Using $PM package manager"
        $PM rebuild
        $PM run --if-present install
        $PM run --if-present prepare

    # We generate our hapify files
    - name: Run npm generate
      shell: bash
      if: ${{ inputs.generate }}
      env:
        PM: ${{ steps.detectPM.outputs.PM }}
      run: $PM run generate
