name: Validate terraform plan

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/**'

jobs:
  # Build our terraform code
  terraform-build:
    # Our code will run on node 16 and Linux
    strategy:
      matrix:
        node: [16.x]
        os: [node-16]

    outputs:
      stacks: ${{ steps.stacks.outputs.result }}

    name: Build stacks plans
    runs-on: [self-hosted, terraform, '${{ matrix.os }}']

    steps:
      # First we checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      # We initialize the node action
      - name: Use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: ${{ secrets.NPM_REGISTRY_URL }}

      # We get our cache compare to our package-lock
      - uses: actions/cache@v2.1.4
        with:
          path: '~/.npm'
          key:
            ${{ matrix.os }}-npm-${{ matrix.node }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-npm-${{ matrix.node }}-

      # We install our dependencies
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --no-audit --no-progress

      # Synthesizing our code into a terraform stacks files
      - name: Synth Terraform
        id: synth
        run: npx nx run terraform:synth
        env:
          PROJECT_CODE: ${{ secrets.PROJECT_CODE }}
          ENV_NAME: ${{ secrets.ENV_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_AVAILABILITY_ZONES: ${{ secrets.AWS_AVAILABILITY_ZONES }}
          TERRAFORM_REMOTE_BACKEND_HOST:
            ${{ secrets.TERRAFORM_REMOTE_BACKEND_HOST }}
          TERRAFORM_REMOTE_BACKEND_ORG:
            ${{ secrets.TERRAFORM_REMOTE_BACKEND_ORG }}
          TERRAFORM_REMOTE_BACKEND_TOKEN:
            ${{ secrets.TERRAFORM_REMOTE_BACKEND_TOKEN }}
          TERRAFORM_REMOTE_BACKEND_WORKSPACE:
            ${{ secrets.TERRAFORM_REMOTE_BACKEND_WORKSPACE }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_SCHEMA: ${{ secrets.POSTGRES_SCHEMA }}
          HOOTSUITE_CLIENT_ID: ${{ secrets.HOOTSUITE_CLIENT_ID }}
          HOOTSUITE_CLIENT_SECRET: ${{ secrets.HOOTSUITE_CLIENT_SECRET }}
          HOOTSUITE_MEMBER_ID: ${{ secrets.HOOTSUITE_MEMBER_ID }}
          REVIEWS_CLIENT_ID: ${{ secrets.REVIEWS_CLIENT_ID }}
          REVIEWS_CLIENT_SECRET: ${{ secrets.REVIEWS_CLIENT_SECRET }}

      - uses: actions/github-script@0.9.0
        id: stacks
        with:
          script: |
            const fs = require('fs');
            console.log('Find all available stacks');
            const stacks = fs.readdirSync('./dist/cdktf.out/stacks');
            console.log(stacks)
            return stacks;

      - uses: actions/upload-artifact@v2
        with:
          name: terraform-stack
          path: dist/cdktf.out/
          if-no-files-found: error

  # Validate our terraform code against our aws account
  terraform-validate:
    if: success()

    needs: [terraform-build]

    # Validate multi stack as the same time
    strategy:
      matrix:
        terraform-stack: ${{fromJson(needs.terraform-build.outputs.stacks)}}

    name: Validate ${{ matrix.terraform-stack }} stack plan
    runs-on: [self-hosted, terraform, node-16]

    steps:
      # Download the terraform artifact created the step above
      - uses: actions/download-artifact@v2
        with:
          name: terraform-stack

      # Setup Terraform with our credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token:
            ${{ secrets.TERRAFORM_REMOTE_BACKEND_TOKEN }}

      # We check if our terraform config is ok
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./stacks/${{ matrix.terraform-stack }}

      # We initialize our terraform
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./stacks/${{ matrix.terraform-stack }}
        timeout-minutes: 1

      # We plan our terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true
        working-directory: ./stacks/${{ matrix.terraform-stack }}

      # We comment the pull request that our plan is good or not
      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform ${{ matrix.terraform-stack}} plan\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # We fail the job if the plan outcome has failed
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
